
//    service areas //
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
  <title>ArcGIS Developer Guide: Service areas</title>
  <style>
    html, body, #viewDiv {
      padding: 0;
      margin: 0;
      height: 100%;
      width: 100%;
    }
  </style>
  <link rel="stylesheet" href="https://js.arcgis.com/4.28/esri/themes/light/main.css">
  <script src="https://js.arcgis.com/4.28"></script>
  <script>
    require([
      "esri/config",
      "esri/Map",
      "esri/views/MapView",
      "esri/rest/networkService",
      "esri/rest/serviceArea",
      "esri/rest/support/ServiceAreaParameters",
      "esri/rest/support/FeatureSet",
      "esri/Graphic",
      "esri/widgets/ScaleBar"
    ], function (
      esriConfig,
      Map,
      MapView,
      networkService,
      serviceArea,
      ServiceAreaParameters,
      FeatureSet,
      Graphic,
      ScaleBar
    ) {
      esriConfig.apiKey = "AAPKf92d7d19ceee4ee29f81e895624150a06MRZfpL_RBchfgSjD_5n-x5IoQJiyrfOoMkhSQyb_cwIx-pXLZlg1mw0wsbjTjvT";
      const url = "https://route-api.arcgis.com/arcgis/rest/services/World/ServiceAreas/NAServer/ServiceArea_World";
      let travelMode = null;
      const map = new Map({
        basemap: "arcgis-navigation"
      });
      const view = new MapView({
        container: "viewDiv",
        map,
        center: [-117.133163, 34.022445],
        zoom: 13,
        constraints: {
          snapToZoom: false
        }
      });
      view.ui.add(new ScaleBar({ view, style: "line" }), "bottom-right");
      view.when(() => {
        createServiceAreas(view.center);
      });
      view.on("click", (event) => {
        createServiceAreas(event.mapPoint);
      });
      function createServiceAreas(point) {
        // Remove any existing graphics
        view.graphics.removeAll();
        const locationGraphic = createGraphic(point);
        findServiceArea(locationGraphic);
      }
      // Create the location graphic
      function createGraphic(geometry) {
        // Create a and add the point
        const graphic = new Graphic({
          geometry,
          symbol: {
            type: "simple-marker",
            color: "white",
            size: 8
          }
        });
        view.graphics.add(graphic);
        return graphic;
      }

      async function findServiceArea(locationFeature) {
        if (!travelMode) {
          const networkDescription = await networkService.fetchServiceDescription(url);
          travelMode = networkDescription.supportedTravelModes.find(
            (travelMode) => travelMode.name === "Walking Distance"
          );
        }

        const serviceAreaParameters = new ServiceAreaParameters({
          facilities: new FeatureSet({
            features: [locationFeature]
          }),
          defaultBreaks: [2.5], // km
          travelMode,
          travelDirection: "to-facility",
          outSpatialReference: view.spatialReference,
          trimOuterPolygon: true
        });
        const { serviceAreaPolygons } = await serviceArea.solve(url, serviceAreaParameters);
        showServiceAreas(serviceAreaPolygons);
      }

      function showServiceAreas(serviceAreaPolygons) {
        const graphics = serviceAreaPolygons.features.map((g)=>{
          g.symbol = {
            type: "simple-fill",
            color: "rgba(255, 0, 0, 0.25)"
          }
          return g
        })
        view.graphics.addMany(graphics, 0);
      }
    });
  </script>
</head>
<body>
  <div id="viewDiv"></div>
</body>
</html>